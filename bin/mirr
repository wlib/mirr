#!/usr/bin/env ruby
# Mirr - Because you like synchronization
# Daniel Ethridge

require "mirr"
include Mirr
require "mirr/version"

# 'argv' will be the lowercase version of 'ARGV', this helps for argument matching
argv = ARGV.map(&:downcase)
mset = "#{Dir.home}/.config/mirr"
usage = "Usage : `mirr [arguments]`
`mirr -h` is always there to help"
littleargs = "You don't have enough arguments, maybe your'e missing something important in your command?"
wrong = "Wrong syntax - `mirr -h` can help"
version = Mirr::VERSION

help = "\n#{usage}\n
Mirr synchronizes all your work for you. That means you can work on stuff from your 
desktop and your laptop, without having to move your work folder to dropbox or something.
Mirr works pretty simply, you can push, pull, and sync files and directories
with other computers. To get started, the first step is to add a file or directory. 
This will tell mirr it needs to keep track of it. If at any point you change a file in
the directory you added, change the directory's path, add or delete files, you will need
to tell mirr to update/refresh its database.

--------------------------------------------------
( Local usage )
mirr add somefile            :   Add `somefile` to your filelist
mirr rm one two etc          :   Remove `one`, `two`, and `etc` from your filelist
mirr refresh                 :   Refresh the synclist database after changing a directory
mirr show filelist           :   Show the filelist entries
( Network usage )
mirr pull 10.0.0.25          :   Pull everything from the computer named 10.0.0.25
mirr push 10.0.0.34 work.rb  :   Push only `work.rb`, nothing else changes
mirr push all                :   Push everything in your list to every computer in your config
mirr sync old-laptop         :   Synchronize everything both you and the computer named `old-laptop` have
--------------------------------------------------

If you find a bug, want extra features, or have a suggestion,
make a branch on github : https://github.com/wlib/mirr\n\n"

# If a key file is missing, initialize mirr again
if ! File.file?("#{mset}/synclist.yml")
  init(mset)
end

# If there are no arguments, display a message to help you remember what the program does
if ARGV.length == 0
  puts "Mirr syncs stuff for you, remember how to use it\n#{usage}"
  exit
end

# Argument parser determines how exactly mirr should behave in the console
case argv[0]
  when "help", "-h", "--help", "h", "?"
    puts help
    exit
  when "version", "--version", "-v", "v"
    puts version
    exit
  when "init", "--init"
    init(mset)
    exit
  when "add", "--add", "-a", "plus", "--plus", "sync", "--sync", "+"
    if argv.length < 2; puts littleargs; exit end
    print "Adding..."
    loading(){
      add(ARGV[1..-1], "#{mset}/filelist.yml", "#{mset}/synclist.yml")
    }
    puts "Successfully added"
    exit
  when "rm", "remove", "--remove", "delete", "--delete", "del", "--del", "-d", "-"
    if argv.length < 2; puts littleargs; exit end
    print "Removing..."
    loading(){
      del(ARGV[1..-1], "#{mset}/filelist.yml", "#{mset}/synclist.yml")
    }
    puts "Successfully removed"
    exit
  when "--refresh", "refresh", "reload", "re", "up", "-u", "u", "--update", "update", "updatedb"
    unless ARGV[1..-1].empty?
      puts "You can't refresh only one file or directory yet, ignoring extra arguments"
    end
    print "Refreshing the database..."
    loading(){
      refresh("#{mset}/filelist.yml", "#{mset}/synclist.yml")
    }
    puts "Successfully refreshed"
    exit
  when "disp", "--disp", "show", "--show", "display"
    # If no arguments, show filelist
    if argv[1..-1].empty?
      show(mset)
    else
      show(mset, argv[1..-1])
    end
  when "push", "--push"
    push(ARGV[1..-1])
    puts "Pushed"
    exit
  when "pull", "--pull"
    pull(ARGV[1..-1])
    puts "Pulled"
    exit
  else
    puts usage
    exit
end